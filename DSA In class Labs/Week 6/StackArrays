#include <bits/stdc++.h>
#include <chrono>
using namespace std;
using namespace std::chrono;

//Initialize the length of the array.
const int length = 10000;

class Stack {
    int top; // Index of topmost element
    int arr[length]; // Array to store stack elements.

public:
    Stack() {
        top = -1; // Initialize top to -1 to indicate empty stack.
    }

    //Check if the stack is empty.
    bool isEmpty() {
        return top == -1;
    }

    //Function to add data into the last element in the array.
    void push(int data) {
        if (top >= length - 1) {
            cout << "Stack Overflow!" << endl;
            exit(1);
        }
        arr[++top] = data;
    }

    //Function to pop data from the last element in the array.
    int pop() {
        if (isEmpty()) {
            cout << "Stack Underflow!" << endl;
            return -1;
        }
        return arr[top--];
    }

    //Function to display the elements in the stack
    void display() {
        if (isEmpty()) {
            cout << "Stack is empty" << endl;
            exit(1);
        }
        else {
            for (int i = top; i >= 0; i--) {
                cout << arr[i];
                if (i != 0){
                    cout << " -> ";
                }
            }
        cout << endl;
        }
    }
};


int main(){
    Stack s;
    int size;
    cout << "Enter size of the stack: ";
    cin >> size ;
    auto start = steady_clock::now();
    //Time start.

    //To add random values to the stack.
    /*for(int i =0 ; i< size;i++){
        s.push(rand()%10);
    }
    s.display();

    for(int i =0 ; i< size/2;i++){
        s.pop();
    }
    s.display();

    for (int i = 0; i< size/4 ; i++){
        s.push(rand()%10);
    }
    s.display();*/

    s.push(8);
    s.push(10);
    s.push(5);
    s.push(11);
    s.push(15);
    s.push(23);
    s.push(6);
    s.push(18);
    s.push(20);
    s.push(17);
    s.display();
    s.pop();
    s.pop();
    s.pop();
    s.pop();
    s.pop();
    s.display();
    s.push(4);
    s.push(30);
    s.push(3);
    s.push(1);
    s.display();


    //Time end.
    auto finish = steady_clock::now();
    //Take the duration of the algorithm.
    auto dur = finish - start;
    //Display the execution time.
    cout << duration_cast<microseconds>(dur).count() << endl;

    return 0;
}
