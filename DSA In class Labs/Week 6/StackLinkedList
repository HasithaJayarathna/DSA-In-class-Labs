#include <bits/stdc++.h>
#include <chrono>
using namespace std;
using namespace std::chrono;

/*Creating a class for the linked list*/
class Node {
public:
    int data;
    Node*link;
    Node(int n){
        this->data = n;
        this->link = NULL;
    }
};

/*Creating a class for the stack*/
class Stack{
    //Top of the stack.
    Node*top;

public:
    Stack(){top = NULL;}

    //check if the stack is empty.
    bool isEmpty(){
        return top == NULL;
    }

    //Function to push data into the stack.
    void push(int data){
        //Creation of a new node.
        Node*current = new Node(data);
        current->data = data;
        current->link = top;
        top = current;
    }

    //Function to pop data out of the stack.
    void pop(){
        //Creation of a new node.
        Node*current;
        if (isEmpty()){
            cout << "\nStack Underflow"<<endl;
            exit(1);
        }
        else{
            current = top;
            top = top->link;
            free(current);
        }
    }

    //Function to display the stack.
    void display(){
        //Creation of a new node.
        Node*current;
        if(top == NULL){
            cout << "\nStack Underflow"<<endl;;
            exit(1);
        }
        else{
            current = top;
            while (current != NULL){
                cout << current->data;
                current = current->link;
                if (current != NULL)
                    cout << " -> ";
            }
            cout << endl;
        }
    }
};


int main(){
    Stack s;
    int size;
    cout << "Enter size of the stack: ";
    cin >> size ;

    auto start = steady_clock::now();
    //Time start.

    //To add random values to the stack.
    /*for(int i =0 ; i< size;i++){
        s.push(rand()%10);
    }
    s.display();

    for(int i =0 ; i< size/2;i++){
        s.pop();
    }
    s.display();

    for (int i = 0; i< size/4 ; i++){
        s.push(rand()%10);
    }
    s.display();*/

    s.push(8);
    s.push(10);
    s.push(5);
    s.push(11);
    s.push(15);
    s.push(23);
    s.push(6);
    s.push(18);
    s.push(20);
    s.push(17);
    s.display();
    s.pop();
    s.pop();
    s.pop();
    s.pop();
    s.pop();
    s.display();
    s.push(4);
    s.push(30);
    s.push(3);
    s.push(1);
    s.display();


    //Time end.
    auto finish = steady_clock::now();
    //Take the duration of the algorithm.
    auto dur = finish - start;
    //Display the execution time.
    cout << duration_cast<microseconds>(dur).count() << endl;

    return 0;
}
